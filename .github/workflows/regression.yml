name: Regression tests


on:
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  # Put back to auto pick from GitHub
  BRANCH: "feat/pipeline-regression-tests"
  # Charge Module config
  AIRBRAKE_HOST: ${{ secrets.AIRBRAKE_HOST }}
  AIRBRAKE_KEY: ${{ secrets.AIRBRAKE_KEY }}
  ADMIN_CLIENT_ID: ${{ secrets.ADMIN_CLIENT_ID }}
  SYSTEM_CLIENT_ID: ${{ secrets.SYSTEM_CLIENT_ID }}
  RULES_SERVICE_URL: ${{ secrets.RULES_SERVICE_URL }}
  RULES_SERVICE_USER: ${{ secrets.RULES_SERVICE_USER }}
  RULES_SERVICE_PASSWORD: ${{ secrets.RULES_SERVICE_PASSWORD }}
  DECISION_SERVICE_URL: ${{ secrets.DECISION_SERVICE_URL }}
  DECISION_SERVICE_USER: ${{ secrets.DECISION_SERVICE_USER }}
  DECISION_SERVICE_PASSWORD: ${{ secrets.AIRBRAKE_HOST }}
  # JWT
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_TOKEN: ${{ secrets.JWT_TOKEN }}
  # Notify
  TEST_NOTIFY_KEY: ${{ secrets.TEST_NOTIFY_KEY }}
  WHITELIST_NOTIFY_KEY: ${{ secrets.WHITELIST_NOTIFY_KEY }}
  LIVE_NOTIFY_KEY: ${{ secrets.LIVE_NOTIFY_KEY }}
  NOTIFY_CALLBACK_TOKEN: ${{ secrets.NOTIFY_CALLBACK_TOKEN }}
  # AWS
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_KEY: ${{ secrets.S3_KEY }}
  S3_SECRET: ${{ secrets.S3_SECRET }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  COGNITO_HOST: ${{ secrets.COGNITO_HOST }}
  COGNITO_USERNAME: ${{ secrets.COGNITO_USERNAME }}
  COGNITO_PASSWORD: ${{ secrets.COGNITO_PASSWORD }}
  # ERRBIT
  ERRBIT_KEY: ${{ secrets.ERRBIT_KEY }}
  ERRBIT_SERVER: ${{ secrets.ERRBIT_SERVER }}
  # NALD
  NALD_ZIP_PASSWORD: ${{ secrets.NALD_ZIP_PASSWORD }}
  NALD_SERVICE_MAILBOX: ${{ secrets.NALD_SERVICE_MAILBOX }}
  # Misc
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  COMPANIES_HOUSE_API_KEY: ${{ secrets.COMPANIES_HOUSE_API_KEY }}
  COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
  SLACK_HOOK: ${{ secrets.SLACK_HOOK }}
  #
  PGUSER: water_user
  PGHOST: localhost
  PGPASSWORD: password
  PGPORT: 5432
  PGDATABASE: permits
  ENVIRONMENT: dev
  DATABASE_URL: postgres://water_user:password@localhost:5432/permits

jobs:
  regression-test:
    runs-on: ubuntu-latest
    name: Regression Test
    steps:
      - name: Checkout water-abstraction-orchestration
        uses: actions/checkout@v2
        with:
          repository: DEFRA/water-abstraction-orchestration
          path: 'water-abstraction-orchestration'
      - name: Compose - dependencies
        run: |
          bash ./water-abstraction-orchestration/dependencies/start.sh
#      - name: Redis - Start
#        run: |
#          docker run --name redis -p 6379:6379 -d redis
#      - name: PostGres - Start
#        run: |
#          docker run --name postgres \
#          -e POSTGRES_USER=water_user \
#          -e POSTGRES_PASSWORD=password \
#          -e POSTGRES_DB=permits \
#          -p 5432:5432 \
#          -d \
#          postgres
#          sleep 30
#          docker ps
      - name: PostGres - Configure
        run: |
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE EXTENSION pgcrypto;"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE ROLE root WITH SUPERUSER CREATEDB CREATEROLE LOGIN;"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "GRANT USAGE ON SCHEMA public TO water_user;"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "set search_path = public, water, idm;"
      - name: PostGres - Set user
        run: |
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "SELECT 'CREATE DATABASE permits' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'permits')"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS permits AUTHORIZATION water_user;"
      - name: PostGres - Create Schema if not exists
        run: |
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS idm"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS crm"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS crm_v2"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS import"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS permit"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS returns"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS water"
          PGPASSWORD=password psql -h localhost -p 5432 -U water_user -tc "CREATE SCHEMA IF NOT EXISTS water_import"
      - name: Clone all repos for orchestration
        run: |
          bash ./water-abstraction-orchestration/helpers/clone-repos.sh
          echo "List of repositories"
          ls
      - name: Checkout feature branch or default to main
        run: |
          echo "Branch: ${{ env.BRANCH }}"
          bash ./water-abstraction-orchestration/helpers/checkout-feature-branch.sh ${{ env.BRANCH }}
      - name: Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: Install node modules
        run: |
          bash ./water-abstraction-orchestration/helpers/setup.sh
      - name: Install UI assets
        run: |
          cd water-abstraction-ui
          npm run install-assets
          cd ..
      - name: Migrate services
        run: |
          bash ./water-abstraction-orchestration/helpers/migrate.sh
          sleep 2m
      - name: Start Services
        run: |
          bash ./water-abstraction-orchestration/pm2/start.sh
          pm2 ls
          sleep 30
      - name: Test services
        run: |
          echo "UI"
          curl "http://localhost:8008/signin"
          echo "Service"
          curl -H "Accept: application/json"  "http://localhost:8001/status"
          echo "Permit"
          curl -H "Accept: application/json"  "http://localhost:8004/status"
          echo "RETURNS"
          curl -H "Accept: application/json"  "http://localhost:8006/status"
          echo "CRM"
          curl -H "Accept: application/json"  "http://localhost:8002/status"
          echo "IDM"
          curl -H "Accept: application/json"  "http://localhost:8003/status"
      - name: Docker - stand up containerise water service
        continue-on-error: true
        run: |
          echo "Stop water api in pm2"
          pm2 stop water-api
          ls
          bash water-abstraction-service/run.sh
          sleep 45
      - name: Run tests - Cypress
        uses: cypress-io/github-action@v2
        with:
          install: true
          working-directory: "./water-abstraction-ui"
          browser: chrome
          headless: true
          spec: "cypress/integration/internal/gauging-stations-and-water-abstraction-alerts.js"
          config: pageLoadTimeout=100000,baseUrl=http://localhost:8008
        env:
          WATER_URI: "http://localhost:8001/water/1.0"
          ADMIN_URI: 'http://localhost:8008/'
          USER_URI: 'http://localhost:8000/'
          BASE_URL: 'http://localhost:8008'
          JWT_TOKEN: ${{ env.JWT_TOKEN }}
          NOTIFY_CALLBACK_TOKEN: ${{ env.NOTIFY_CALLBACK_TOKEN }}
#       Debug steps
      - name: Docker log after test
        run: |
          docker logs service-api
      - name: Upload Cypress Artifact
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: cypress
          path: ./water-abstraction-ui/cypress/
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: PM2-Logs
          path: ~/.pm2/logs/

